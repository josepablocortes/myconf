" nvim

call plug#begin()
    Plug 'haya14busa/incsearch.vim'
    Plug 'craigemery/vim-autotag'
    Plug 'ctrlpvim/ctrlp.vim' 
    Plug 'airblade/vim-gitgutter'
    Plug 'mhinz/vim-signify'
    Plug 'ludovicchabant/vim-gutentags'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
"    Plug 'easymotion/vim-easymotion'
    Plug 'autozimu/LanguageClient-neovim', {
        \ 'branch': 'next',
        \ 'do': 'bash install.sh',
        \ }

    " (Optional) Multi-entry selection UI.
    Plug 'junegunn/fzf'
call plug#end()

let g:indentLine_fileTypeExclude = ['text', 'sh', 'help', 'terminal']
" incremental search
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)

" As default vertical split alway to right

set splitright



" set tags+=/home/jose.cortes/devtools/vim/tags/gcc_48_cpp_tags

" see ctags annotations
" set tags+=~/.vim/cpp_tags
" set tags+=./tags

let g:netrw_banner = 1 " Banner top with help
" let g:netrw_liststyle = 3
" let g:netrw_browse_split = 4
" let g:netrw_altv = 1
" let g:netrw_winsize = 25
let g:netrw_browsex_viewer= "xdg-open"
set listchars=tab:‚Üí\ ,space:¬∑,nbsp:‚ê£,trail:‚Ä¢,eol:¬∂,precedes:¬´,extends:¬ª
set nolist
set autoindent
set smartindent
set shiftwidth=2
set tabstop=2
set smarttab
set expandtab
set hidden
" numbers
set number relativenumber  " see the line number column
set mouse=a
" set colorcolumn=80,120
" hi ColorColumn ctermbg=DarkGrey guibg=DarkGrey

let g:airline_theme='angr'
" let g:airline_solarized_bg='light'



" highlight matching braces
set showmatch
" When the last window will have a status line (2 = always)
set laststatus=2

set ignorecase
set nowrap
" let mapleader = "-"
map <Space> <Leader>
nmap <Leader>b :CtrlPMixed<CR>
" let g:ctrlp_reuse_window = 'netrw'
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/OUTPUT/*        " Linux/MacOSX
set path=$PWD/**

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_follow_symlinks = 0
let g:ctrlp_root_markers = ['.ctrlp']
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

set comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,bO:///,O://
set cursorline
set cursorline!

hi CursorLine ctermbg=235
" hi CursorLine   cterm=NONE ctermbg=darkgrey ctermfg=NONE

function! SingleComment()
 normal ^i//
endfunction

function! RemoveSingleComment()
 normal 0df//
endfunction

" remove arrow
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
map <PageUp> <NOP>
map <PageDown> <NOP>

imap <PageUp> <NOP>
imap <PageDown> <NOP>

function! ChangeToHardMode()
  noremap h <NOP>
  noremap j <NOP>
  noremap k <NOP>
  noremap l <NOP>
endfunction

function! RemoveHardMode()
  noremap h h  
  noremap j j
  noremap k k
  noremap l l
endfunction

" :let g:load_doxygen_syntax=1
" Comment at begining
noremap <Leader>c :call SingleComment()<CR>
" remove coomment at begining
noremap <Leader>x :s/^/\/\///<CR>

noremap <Leader>[ gT<CR>
noremap <Leader>] gt<CR>

noremap <Leader>{ :bnext<CR>
noremap <Leader>} :bprevious<CR>


" switch header and cpp
nnoremap <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
" build tags
nnoremap <Leader><F9> :!ctags -R .; ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extras --language-force=C++ <CR>
" nnoremap <F9> :!ctags -R .<CR>


let &makeprg='ninja'
noremap <Leader><F7> :!cmake  -G"Ninja" -DCMAKE_BUILD_TYPE="Debug" ..<CR>
nnoremap <F7> :make<CR>
!
" F3: Togglelist (display unprintable characters).
nnoremap <F3> :set list!<CR>

" Quickfix shorcuts
noremap <Leader>n :cn<cr>
noremap <Leader>p :cp<cr>
set exrc
set secure

" Some C++helpers
set define="^\\(#\\s*define\\|[a-z]*\\s*const\\s*[a-z]*\\)"  

" map [[ ?{<CR>w99[{
" map ][ /}<CR>b99]}
" map ]] j0[[%/{<CR>
" map [] k$][%?}<CR>

" Clang-formater
" https://clang.llvm.org/docs/ClangFormat.html
" The first line enables clang-format for NORMAL and VISUAL mode, the second line adds support for INSERT mode. Change ‚ÄúC-K‚Äù to another binding if you need clang-format on a different key (C-K stands for Ctrl+k).
" 
" With this integration you can press the bound key and clang-format will format the current line in NORMAL and INSERT mode or the selected region in VISUAL mode. The line or region is extended to the next bigger syntactic entity.
" 
" It operates on the current, potentially unsaved buffer and does not create or save any files. To revert a formatting, just undo.
"
" /usr/share/clang/clang-format-8/clang-format-diff.py
" /usr/share/clang/clang-format-8/clang-format-sublime.py
" /usr/share/clang/clang-format-8/clang-format.py
" /usr/share/doc/clang-format
" 
map <C-K> :%pyf /usr/share/clang/clang-format-8/clang-format.py<cr>
imap <C-K> <c-o>:%pyf /usr/share/clang/clang-format-8/clang-format.py<cr>
set wildignore+=**/temp/*
set wildignore+=**/build/*
set path+=**

set splitbelow
nnoremap <Leader><C-]> <Esc>:exe "ptjump " . expand("<cword>")<Esc>
nnoremap <C-]> <Esc>:exe "tjump " . expand("<cword>")<Esc>
" function! Formatonsave()
"   let l:formatdiff = 1
"   pyf ~/llvm/tools/clang/tools/clang-format/clang-format.py
" endfunction
" autocmd BufWritePre *.h,*.cc,*.cpp call Formatonsave()
"
" 
function! ClangCheckImpl(cmd)
  if &autowrite | wall | endif
  echo "Running " . a:cmd . " ..."
  let l:output = system(a:cmd)
  cexpr l:output
  cwindow
  let w:quickfix_title = a:cmd
  if v:shell_error != 0
    cc
  endif
  let g:clang_check_last_cmd = a:cmd
endfunction

function! ClangCheck()
  let l:filename = expand('%')
  if l:filename =~ '\.\(cpp\|cxx\|cc\|c\)$'
    call ClangCheckImpl("clang-check " . l:filename)
  elseif exists("g:clang_check_last_cmd")
    call ClangCheckImpl(g:clang_check_last_cmd)
  else
    echo "Can't detect file's compilation arguments and no previous clang-check invocation!" l:filename
  endif
endfunction

nmap <silent> <F2> :call ClangCheck()<CR><CR>


" LanguageClient-neovim
" Required for operations modifying multiple buffers like rename.
set hidden
let g:LanguageClient_serverCommands = {
 \ 'cpp': ['clangd'],
 \ }
" Automatically start language servers.
let g:LanguageClient_autoStart = 1

" Autocompletion Configurations
" let g:deoplete#enable_at_startup = 1
" set completeopt=longest,menuone,preview
" close the preview window when you're not using it
" autocmd InsertLeave * if pumvisible() == 0 | pclose | endif
set hidden
nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>


if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd', '-background-index']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
endif

